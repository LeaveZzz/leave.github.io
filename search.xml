<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AngularJS基本语法</title>
    <url>/archives/16107.html</url>
    <content><![CDATA[<!-- build time:Sat Jul 31 2021 00:39:59 GMT+0800 (GMT+08:00) --><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="全局安装angular-cli"><a href="#全局安装angular-cli" class="headerlink" title="全局安装angular/cli"></a>全局安装angular/cli</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ng v</span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ng new 项目名称</span><br></pre></td></tr></table></figure><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ng serve 或 ng serve --open（自动打开浏览器）</span><br></pre></td></tr></table></figure><h2 id="查看可创建的控件"><a href="#查看可创建的控件" class="headerlink" title="查看可创建的控件"></a>查看可创建的控件</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ng g</span><br></pre></td></tr></table></figure><h2 id="创建自定义组件"><a href="#创建自定义组件" class="headerlink" title="创建自定义组件"></a>创建自定义组件</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ng g component 目录+组件名</span><br><span class="line">例：ng g component components/home</span><br></pre></td></tr></table></figure><h2 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h2><h3 id="在home-component-html中填充内容"><a href="#在home-component-html中填充内容" class="headerlink" title="在home.component.html中填充内容"></a>在home.component.html中填充内容</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是首页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在根组件中使用"><a href="#在根组件中使用" class="headerlink" title="在根组件中使用"></a>在根组件中使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-home</span>&gt;</span><span class="tag">&lt;/<span class="name">app-home</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="声明属性的几种方式"><a href="#声明属性的几种方式" class="headerlink" title="声明属性的几种方式"></a>声明属性的几种方式</h2><ul><li><p>public 共有（默认） 可以在当前类里使用, 也可以在类外面使用</p></li><li><p>protected 保护类型 只有在当前类和它的子类里使用</p></li><li><p>private 私有 只有在当前类里可以使用</p></li></ul><h2 id="声明属性"><a href="#声明属性" class="headerlink" title="声明属性"></a>声明属性</h2><h3 id="规范写法"><a href="#规范写法" class="headerlink" title="规范写法"></a>规范写法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public message:any = <span class="string">'hello world'</span>;</span><br><span class="line">public userInfo:object = &#123;</span><br><span class="line">  userName : <span class="string">'leaveHao'</span>,</span><br><span class="line">  age : <span class="number">22</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">message = <span class="string">'hello world'</span>;</span><br><span class="line">userInfo:object = &#123;</span><br><span class="line">  name : <span class="string">'leaveHao'</span>,</span><br><span class="line">  age : <span class="number">22</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="普通循环-ngFor"><a href="#普通循环-ngFor" class="headerlink" title="普通循环 *ngFor"></a>普通循环 *ngFor</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public arr:any[] = [<span class="string">'北京'</span>,<span class="string">'上海'</span>,<span class="string">'深圳'</span>];</span><br><span class="line">或者</span><br><span class="line">public arr:<span class="built_in">Array</span>&lt;any&gt; = [<span class="string">'北京'</span>,<span class="string">'上海'</span>,<span class="string">'深圳'</span>];</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngFor</span>=<span class="string">"let item of arr; let i = index"</span>&gt;</span>&#123;&#123;item&#125;&#125;&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">或者</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngFor</span>=<span class="string">"let item of arr index as i"</span>&gt;</span>&#123;&#123;item&#125;&#125;&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件判断-ngIf-ngSwitch"><a href="#条件判断-ngIf-ngSwitch" class="headerlink" title="条件判断 *ngIf *ngSwitch"></a>条件判断 *ngIf *ngSwitch</h2><h3 id="ngIf"><a href="#ngIf" class="headerlink" title="*ngIf"></a>*ngIf</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public flag:boolean = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> *<span class="attr">ngIf</span>=<span class="string">"flag;else notActive"</span> <span class="attr">src</span>=<span class="string">"assets/image/home_active.svg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">notActive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/image/home.svg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ngSwitch"><a href="#ngSwitch" class="headerlink" title="*ngSwitch"></a>*ngSwitch</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public status:number = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngSwitch</span>]=<span class="string">"status"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"1"</span>&gt;</span>早上<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"2"</span>&gt;</span>中午<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"3"</span>&gt;</span>晚上<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngSwitchDefault</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>AngularJS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>AngularJS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS使用定时器实现长按事件</title>
    <url>/archives/81488588.html</url>
    <content><![CDATA[<!-- build time:Sat Jul 31 2021 00:39:59 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JS原生事件并没有长按事件,但是我们可以利用一些原生的事件,来实现长按事件</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>下面的示例是在Vue环境下演示,若使用其他框架转换语法即可。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">touchstart</span>=<span class="string">"longTap($event)"</span> @<span class="attr">touchend</span>=<span class="string">"shortTap"</span> @<span class="attr">touchmove</span>=<span class="string">"contentScroll($event)"</span>&gt;</span>定时器实现长按事件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里监听touchmove事件是为了解决移动端绑定touchstart事件的元素内部无法触摸滚动的问题 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	data()&#123;</span><br><span class="line">	  <span class="keyword">return</span> &#123;</span><br><span class="line">       Loop: <span class="number">0</span> </span><br><span class="line">	  &#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	methods:&#123;</span><br><span class="line">     longTap(e) &#123;</span><br><span class="line">       <span class="keyword">let</span> touch = e.touches[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">this</span>.touchY = touch.clientY;</span><br><span class="line">       <span class="keyword">this</span>.Loop = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.Loop = <span class="number">0</span>;</span><br><span class="line">         <span class="comment">//需要长按执行的代码放在下面</span></span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'长按事件'</span>);</span><br><span class="line">       &#125;, <span class="number">500</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;,</span><br><span class="line">     contentScroll(e) &#123; <span class="comment">//如果手指有移动，则取消所有事件，此时说明用户只是要移动而不是长按</span></span><br><span class="line">       <span class="keyword">let</span> touch = e.touches[<span class="number">0</span>];</span><br><span class="line">       <span class="comment">//以Android 4.0.4为首的一些可恶分子却有些不听话:他们的touchend事件没有如预期的那样触发，当只是轻点一下屏幕时，touchend可以正常触发。但是只要当 touchmove 被触发之后，touchend 就不会再被触发了，而且 touchmove 也没有持续触发。通过阻止默认事件来解决。</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(touch.clientY - <span class="keyword">this</span>.touchY) &lt; <span class="number">10</span>) &#123;</span><br><span class="line">         e.preventDefault();</span><br><span class="line">       &#125;</span><br><span class="line">       clearTimeout(<span class="keyword">this</span>.Loop); <span class="comment">//清除计时器 </span></span><br><span class="line">       <span class="keyword">this</span>.Loop = <span class="number">0</span>; <span class="comment">//清除标识位</span></span><br><span class="line">     &#125;,			</span><br><span class="line">     shortTap() &#123;</span><br><span class="line">       clearTimeout(<span class="keyword">this</span>.Loop);</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.Loop !== <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">//需要点击执行的代码放在下面</span></span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'点击事件'</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;			</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记(七)</title>
    <url>/archives/8cf3aeef.html</url>
    <content><![CDATA[<!-- build time:Sat Jul 31 2021 00:39:59 GMT+0800 (GMT+08:00) --><ul><li>装饰器是一种特殊类型的声明，他能够被附加到类声明，方法，属性或者参数上，可以修改类的行为。</li><li>通俗的将装饰器就是一个方法，可以注入到类、方法、属性参数上来扩展类、属性、方法、参数的功能。</li><li>常见的装饰器有：类装饰器、属性装饰器、方法装饰器、参数装饰器。</li><li>装饰器的写法：普通装饰器（无法传参）、装饰器工厂（可传参）。</li><li>装饰器是过去几年中 js 最大的成就之一，已经是 ES7 的标准特性之一。</li></ul><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params: any</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params); <span class="comment">//params就是当前类</span></span><br><span class="line">  params.prototype.apiUrl = <span class="string">"动态扩展的属性"</span>;</span><br><span class="line">  params.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是一个run方法"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@logClass <span class="comment">//类装饰器,普通装饰器,无法传参,默认把class传入</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  getData() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//装饰器工厂</span></span><br><span class="line"><span class="comment">//作用:修改构造函数 扩展类属性和方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params: string</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// params是下方传过来的参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// target相当于是默认传过来的</span></span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">    <span class="built_in">console</span>.log(params);</span><br><span class="line">    target.prototype.apiUrl = params;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@logClass(<span class="string">"http://blog.leospace.cn"</span>) <span class="comment">// 可以传参</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  getData() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> http: any = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="built_in">console</span>.log(http.apiUrl); <span class="comment">// http://blog.leospace.cn</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以修改构造函数的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">target: any</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target);</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">target</span> </span>&#123;</span><br><span class="line">    apiUrl: any = <span class="string">'我是修改后的新数据'</span>;</span><br><span class="line">    getData() &#123;</span><br><span class="line">      <span class="keyword">this</span>.apiUrl = <span class="keyword">this</span>.apiUrl + <span class="string">'@@@'</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.apiUrl);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@logClass(<span class="string">"http://blog.leospace.cn"</span>) <span class="comment">// 可以传参</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  <span class="comment">//这个属性修饰器的作用就是给url赋值初始值</span></span><br><span class="line">  @logProperty(<span class="string">"http://blog.leospace.cn"</span>)</span><br><span class="line">  public url: any | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  getData() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> http: any = <span class="keyword">new</span> HttpClient();</span><br><span class="line">http.getData();</span><br></pre></td></tr></table></figure><h2 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h2><p>可以给属性赋值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params: string</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// params是下方传过来的参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// target是默认传过来的类对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">    <span class="built_in">console</span>.log(params);</span><br><span class="line">    target.prototype.apiUrl = params;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logProperty</span>(<span class="params">params: any</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 固定写法,参数中:target为类对象,attr为被装饰的属性名称</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any, attr: any</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">    <span class="built_in">console</span>.log(attr);</span><br><span class="line">    target[attr] = params;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@logClass(<span class="string">"http://blog.leospace.cn"</span>) <span class="comment">// 可以传参</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  <span class="comment">//这个属性修饰器的作用就是给url赋值初始值</span></span><br><span class="line">  @logProperty(<span class="string">"http://blog.leospace.cn"</span>)</span><br><span class="line">  public url: any | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  getData() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> http: any = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="built_in">console</span>.log(http.apiUrl); <span class="comment">// http://blog.leospace.cn</span></span><br></pre></td></tr></table></figure><h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">params: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any, methodName: any, desc: any</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target); <span class="comment">//对于静态成员来说是类的构造函数,对实例成员来说是类的原型对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(methodName); <span class="comment">//方法名字,getData</span></span><br><span class="line">    <span class="built_in">console</span>.log(desc); <span class="comment">//方法的描述对象,desc.value是该方法</span></span><br><span class="line">    target.apiUrl = <span class="string">'xxx'</span>; <span class="comment">//修改类属性</span></span><br><span class="line">    target.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'run'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  public url: any | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  @<span class="keyword">get</span>('https://www.baidu.com')</span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> http: any = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="built_in">console</span>.log(http.apiUrl); <span class="comment">//输出xxx</span></span><br><span class="line">http.run(); <span class="comment">//输出run</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例二 修改当前的方法(主要作用是装饰方法,并把方法的参数给变换类型)</span></span><br><span class="line"><span class="comment">//这个方法装饰其主要作用就是把参数都给格式化成string类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">params: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any, methodName: any, desc: any</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//修改方法,使所有参数变成string类型,并打印</span></span><br><span class="line">    <span class="keyword">let</span> oMethod = desc.value;</span><br><span class="line">    desc.value = <span class="function"><span class="keyword">function</span> (<span class="params">...args: any[]</span>) </span>&#123;</span><br><span class="line">      args = args.map(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">String</span>(value);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//利用apply进行对象冒充,对getdata进行修改,如果没有apply就相当于替换了getData方法</span></span><br><span class="line">      oMethod.apply(<span class="keyword">this</span>, args); <span class="comment">//this指HttpClient类</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  public url: any | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  @<span class="keyword">get</span>('https://www.baidu.com')</span><br><span class="line">  getData(...args: any[]) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是getData方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> http: any = <span class="keyword">new</span> HttpClient();</span><br><span class="line">http.getData(<span class="number">123</span>, <span class="string">'xxx'</span>); <span class="comment">//['123','xxx'] 我是getData方法</span></span><br></pre></td></tr></table></figure><h2 id="方法参数装饰器"><a href="#方法参数装饰器" class="headerlink" title="方法参数装饰器"></a>方法参数装饰器</h2><p>用的比较少，类装饰器也可以实现这个功能</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logParams</span>(<span class="params">params: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any, methodName: any, paramsIndex: any</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params); <span class="comment">// xxxx</span></span><br><span class="line">    <span class="built_in">console</span>.log(target); <span class="comment">// 原型对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(methodName); <span class="comment">// getData</span></span><br><span class="line">    <span class="built_in">console</span>.log(paramsIndex); <span class="comment">//参数在函数参数列表中的索引 0</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  public url: any | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  getData(uuid: any, @logParams(<span class="string">'xxxx'</span>) nanoid: string) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(uuid); <span class="comment">// iii</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> HttpClient();</span><br><span class="line">a.getData(<span class="string">'iii'</span>, <span class="string">'ooo'</span>);</span><br></pre></td></tr></table></figure><h2 id="装饰器执行顺序"><a href="#装饰器执行顺序" class="headerlink" title="装饰器执行顺序"></a>装饰器执行顺序</h2><p>当存在多个装饰器时候：从上到下,从右到左。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记(三)</title>
    <url>/archives/761c4665.html</url>
    <content><![CDATA[<!-- build time:Sat Jul 31 2021 00:39:59 GMT+0800 (GMT+08:00) --><h2 id="回顾：ES5-中的类"><a href="#回顾：ES5-中的类" class="headerlink" title="回顾：ES5 中的类"></a>回顾：ES5 中的类</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`姓名:<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>,年龄:<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原型上定义属性和方法</span></span><br><span class="line">Person.prototype.sex = <span class="string">"男"</span>;</span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hi~"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象冒充继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Inherit</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age); <span class="comment">//可以继承构造函数里面的属性和方法,实例化子类可以给父类传参,但是无法继承原型(Person.prototype)上的属性和方法。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> i = <span class="keyword">new</span> Inherit(<span class="string">"Leo"</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">//new关键字做了什么?</span></span><br><span class="line"><span class="comment">//1&gt; let obj = &#123;&#125;;</span></span><br><span class="line"><span class="comment">//2&gt; obj.__proto__ = Inherit.prototype;</span></span><br><span class="line"><span class="comment">//3&gt; let i = Inherit.call(obj,'Leo',18);</span></span><br><span class="line">i.getInfo(); <span class="comment">//姓名:Leo,年龄:18</span></span><br><span class="line">i.sayHi(); <span class="comment">//无法继承原型上的属性和方法 i.sayHi is not a function</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型链继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Inherit</span>(<span class="params">name, age</span>) </span>&#123;&#125;</span><br><span class="line">Inherit.prototype = <span class="keyword">new</span> Person(); <span class="comment">//可以继承构造函数和原型里面的属性和方法,但是实例化子类时无法给父类传参。</span></span><br><span class="line"><span class="comment">//Inherit.prototype.__proto__ = Person.prototype;</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="keyword">new</span> Inherit(<span class="string">"Leo"</span>, <span class="number">18</span>);</span><br><span class="line">i.sayHi(); <span class="comment">//hi~</span></span><br><span class="line">i.getInfo(); <span class="comment">//无法给父类传参 姓名:undefined,年龄:undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型链+对象冒充组合使用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Inherit</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>,name,age);<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">Inherit.prototype = new Person();</span></span><br><span class="line"><span class="regexp">let i = new Inherit('Leo',18);</span></span><br><span class="line"><span class="regexp">i.sayHi(); /</span><span class="regexp">/hi~</span></span><br><span class="line"><span class="regexp">i.getInfo(); /</span><span class="regexp">/i.sayHi is not a function</span></span><br></pre></td></tr></table></figure><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ts里面定义属性的时候给我们提供了三种修饰符：</span><br><span class="line">  public(默认):公有,在类里面、子类、类外部都可以访问</span><br><span class="line">  protected:保护,在类里面、子类里面可以访问,在类外部无法访问</span><br><span class="line">  private:私有,在类里面可以访问,子类、类外部没法访问</span><br><span class="line">  注：属性如果没有显示声明修饰符，则默认为 public</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  public name: string;</span><br><span class="line">  <span class="keyword">constructor</span>(name:string)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; <span class="comment">//类里使用</span></span><br><span class="line">  &#125;</span><br><span class="line">  getName():string&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'Leo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">//类外部使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inherit</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  setName(name:string):<span class="keyword">void</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; <span class="comment">//子类里使用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> i = <span class="keyword">new</span> Inherit(<span class="string">'小明'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(i.name); <span class="comment">//类外部使用</span></span><br></pre></td></tr></table></figure><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  name: string; <span class="comment">//这里省略了public</span></span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="comment">//构造函数,实例化类时触发的方法</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  getName(): string &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  setName(name: string): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">"Leo"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.getName());</span><br><span class="line">p.setName(<span class="string">"小明"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.getName());</span><br></pre></td></tr></table></figure><h2 id="静态属性-amp-静态方法"><a href="#静态属性-amp-静态方法" class="headerlink" title="静态属性 &amp; 静态方法"></a>静态属性 &amp; 静态方法</h2><p>通过<code>static</code>关键字声明静态属性 &amp; 静态方法，通过<code>类名.属性名</code>或者<code>类名.方法名</code>直接调用。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  public name: string;</span><br><span class="line">  public age: number = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态属性</span></span><br><span class="line">  <span class="keyword">static</span> sex = <span class="string">'男'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步。`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态方法</span></span><br><span class="line">  <span class="keyword">static</span> print() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是静态方法print'</span>);</span><br><span class="line">    <span class="comment">//静态方法里面没法直接调用类里面的属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age); <span class="comment">//undefined</span></span><br><span class="line">    <span class="comment">//静态属性调用</span></span><br><span class="line">    <span class="built_in">console</span>.log(Person.sex); <span class="comment">//男</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'张三'</span>);</span><br><span class="line">p.run(); <span class="comment">//张三在跑步。</span></span><br><span class="line"><span class="comment">//静态方法调用</span></span><br><span class="line">Person.print();</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>使用<code>extends</code>和<code>super</code>关键字实现继承。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inherit</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> i = <span class="keyword">new</span> Inherit(<span class="string">"小明"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(i.getName());</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>父类定义一个方法不去实现，让继承它的子类去实现，每一个子类有不同的表现。多态属于继承。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类 Animal</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  public name: string;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//定义一个方法,具体不做实现,子类自己实现。</span></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'function: eat'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类 Dog</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>  <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//自行实现父类定义的eat方法</span></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>吃肉。`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类 Cat</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//自行实现父类定义的eat方法</span></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>吃鱼。`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> Dog(<span class="string">'小狗'</span>);</span><br><span class="line">d.eat();  <span class="comment">//小狗吃肉。</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Cat(<span class="string">'小猫'</span>);</span><br><span class="line">c.eat();  <span class="comment">//小猫吃鱼。</span></span><br></pre></td></tr></table></figure><h2 id="抽象类-amp-抽象方法："><a href="#抽象类-amp-抽象方法：" class="headerlink" title="抽象类 &amp; 抽象方法："></a>抽象类 &amp; 抽象方法：</h2><ul><li>使用<code>abstract</code>关键字定义抽象类和抽象方法，抽象方法只能放在抽象类里面。</li><li>ts 中的抽象类，是提供其他类继承的基类，不能直接被实例化。抽象类中的抽象方法不包含具体实现且必须在派生类中实现。</li><li>抽象类和抽象方法用来定义标准。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类 Animal</span></span><br><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    public name: string;</span><br><span class="line">    <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//抽象方法,子类必须实现这个方法</span></span><br><span class="line">    abstract eat(): any;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通方法,不要求子类必须实现</span></span><br><span class="line">    sleep() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在睡觉。`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal();  <span class="comment">// error: 无法创建抽象类的实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子类 Dog 继承 抽象类 Animal</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//抽象类的子类(派生类)必须实现抽象类里的抽象方法,如果不实现会报错。</span></span><br><span class="line">    eat() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>吃肉。`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> Dog(<span class="string">'小狗'</span>);</span><br><span class="line">d.eat();  <span class="comment">//小狗吃肉。</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记(一)</title>
    <url>/archives/4a9ed04d.html</url>
    <content><![CDATA[<!-- build time:Sat Jul 31 2021 00:39:59 GMT+0800 (GMT+08:00) --><p><code>TypeScript</code>中为了使编写的代码更规范，增加了类型校验</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js:类型变化不报错</span></span><br><span class="line"><span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">flag = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// ts:必须指定类型</span></span><br><span class="line"><span class="keyword">let</span> flag: boolean = <span class="literal">true</span>;</span><br><span class="line">flag = <span class="number">123</span>; <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h2 id="布尔类型-boolean"><a href="#布尔类型-boolean" class="headerlink" title="布尔类型(boolean)"></a>布尔类型(<code>boolean</code>)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> flag: boolean = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h2 id="数字类型-number"><a href="#数字类型-number" class="headerlink" title="数字类型(number)"></a>数字类型(<code>number</code>)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num: number = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><h2 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型(string)"></a>字符串类型(<code>string</code>)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str: string = <span class="string">"hello world!"</span>;</span><br></pre></td></tr></table></figure><h2 id="数组类型-array"><a href="#数组类型-array" class="headerlink" title="数组类型(array)"></a>数组类型(<code>array</code>)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写法一</span></span><br><span class="line"><span class="keyword">let</span> arr1: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2: string[] = [<span class="string">"Angular"</span>, <span class="string">"React"</span>, <span class="string">"Vue"</span>];</span><br><span class="line"><span class="keyword">let</span> arr3: any[] = [<span class="string">"hi"</span>, <span class="number">123</span>, <span class="literal">false</span>];</span><br><span class="line"><span class="comment">//写法二</span></span><br><span class="line"><span class="keyword">let</span> arr4: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><h2 id="元组类型-tuple"><a href="#元组类型-tuple" class="headerlink" title="元组类型(tuple)"></a>元组类型(<code>tuple</code>)</h2><p>元组属于数组的一种，可以指定数组内值的类型(元素顺序和个数必须与定义的保持一致)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: [string, number, boolean] = [<span class="string">"hi"</span>, <span class="number">123</span>, <span class="literal">false</span>];</span><br></pre></td></tr></table></figure><h2 id="枚举类型-enum"><a href="#枚举类型-enum" class="headerlink" title="枚举类型(enum)"></a>枚举类型(<code>enum</code>)</h2><p>常用来标识状态码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">enum Flag&#123;</span><br><span class="line">  success=<span class="number">1</span>,</span><br><span class="line">  error=<span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f:Flag=Flag.error; <span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果标识符没有赋值，那么打印的就是下标</span></span><br><span class="line">enum Coloe &#123;</span><br><span class="line">  red,</span><br><span class="line">  blue=<span class="string">'#0000FF'</span>,</span><br><span class="line">  orange</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c1:Color = Color.red; <span class="comment">//0</span></span><br><span class="line"><span class="keyword">let</span> c2:Color = Color.blue; <span class="comment">//'#0000FF'</span></span><br><span class="line"><span class="keyword">let</span> c3:Color = Color.orange; <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="任意类型-any"><a href="#任意类型-any" class="headerlink" title="任意类型(any)"></a>任意类型(<code>any</code>)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num: any = <span class="number">123</span>;</span><br><span class="line">num = <span class="literal">true</span>; <span class="comment">//不报错</span></span><br></pre></td></tr></table></figure><h2 id="null-和-undefined"><a href="#null-和-undefined" class="headerlink" title="null 和 undefined"></a><code>null</code> 和 <code>undefined</code></h2><p><code>null</code> 和 <code>undefined</code>是其他数据类型(<code>never</code>类型)的子类型</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量定义之后没有赋值，编译时会报错</span></span><br><span class="line"><span class="keyword">let</span> a: number;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//error TS2454: letiable 'a' is used before being assigned.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个元素可能是number类型，可能是null或者undefined</span></span><br><span class="line"><span class="keyword">let</span> b: number | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//无报错，打印undefined</span></span><br></pre></td></tr></table></figure><h2 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a><code>void</code>类型</h2><p><code>void</code>表示没有任何类型，一般用于一个方法没有返回值的情况，值得注意的是，方法没有返回值将得到<code>undefined</code>，但是我们需要定义成<code>void</code>类型，而不是<code>undefined</code>类型，否则将报错。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果方法没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"abc"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果方法有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a><code>never</code>类型</h2><ul><li><code>never</code>表示的是那些永不存在的值的类型，包括<code>null</code>和<code>undefined</code>。</li><li>在一个没有返回值标注的函数表达式或箭头函数中,如果函数没有<code>return</code>语句,或者仅有表达式类型为<code>never</code>的<code>return</code>语句,并且函数的终止点无法被执行到(按照控制流分析), 则推导出的函数返回值类型是<code>never</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回never的函数必须有无法被执行到的终止点</span></span><br><span class="line"><span class="keyword">let</span> err = (): <span class="function"><span class="params">never</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"异常"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> infiniteLoop = (): <span class="function"><span class="params">never</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记(二)</title>
    <url>/archives/8ef664e.html</url>
    <content><![CDATA[<!-- build time:Sat Jul 31 2021 00:39:59 GMT+0800 (GMT+08:00) --><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数声明法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr</span>(<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"hello world!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line"><span class="keyword">let</span> gerNum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">let</span> getFlag = (): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="函数中传参"><a href="#函数中传参" class="headerlink" title="函数中传参"></a>函数中传参</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义参数的数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: string, age: number</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">getInfo(<span class="string">"Leo"</span>, <span class="number">18</span>); <span class="comment">//Leo---18</span></span><br><span class="line">getInfo(<span class="string">"Leo"</span>); <span class="comment">//编译报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可选参数(可选参数必须放在参数的最后面)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: string, age?: number</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> age ? <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span> : <span class="string">`<span class="subst">$&#123;name&#125;</span>---年龄保密`</span>;</span><br><span class="line">&#125;</span><br><span class="line">getInfo(<span class="string">"Leo"</span>, <span class="number">18</span>); <span class="comment">//Leo---18</span></span><br><span class="line">getInfo(<span class="string">"Leo"</span>); <span class="comment">//Leo---年龄保密</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: string = <span class="string">"Leo"</span>, age: number = <span class="number">18</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">getInfo(); <span class="comment">//Leo---18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//剩余参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">...args: number[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">pre, item</span>) =&gt;</span> pre + item, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">getSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">//15</span></span><br></pre></td></tr></table></figure><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><ul><li><p>方法重载(<code>overload</code>)在传统的静态类型语言中是很常见的。JavaScript 作为动态语言， 是没有重载这一说的。一是它的参数没有类型的区分，二是对参数个数也没有检查。虽然语言层面无法自动进行重载，但借助其动态的特性，我们可以在代码中手动检查入参的类型，或者通过<code>arguments</code>获取到参数个数，从而实现根据不同的入参做不同的操作。</p></li><li><p>比如有一个获取聊天消息的方法，根据传入的参数从数组中查找数据。如果入参为数字，则认为是 id，然后从数据源中找对应 id 的数据并返回，否则当成类型，返回这一类型的消息。</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TypeScript中,假如我们的消息数据为如下结构：</span></span><br><span class="line">type MessageType = <span class="string">"string"</span> | <span class="string">"image"</span> | <span class="string">"audio"</span>;</span><br><span class="line">type Message = &#123;</span><br><span class="line">  id: number,</span><br><span class="line">  type: MessageType,</span><br><span class="line">  content: string,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> data: Message[] = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">type</span>: <span class="string">"string"</span>, <span class="attr">content</span>: <span class="string">"hello"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">"image"</span>, <span class="attr">content</span>: <span class="string">"url_for_iamge"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">"string"</span>, <span class="attr">content</span>: <span class="string">"world"</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不使用重载实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMessage</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  query: number | MessageType</span></span></span><br><span class="line">): Message[] | Message | undefined &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> query === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data.find(<span class="function"><span class="params">message</span> =&gt;</span> message.id === query);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.filter(<span class="function"><span class="params">message</span> =&gt;</span> message.type === query);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样做有两个缺点一是类型书写上不太优雅，二是没有发挥出TypeScript类型检查的优势，这里我们是可以根据入参的类型明确知道返回的类型的，即如果传入的是id，返回的是单个数据或undefined，如果是根据类型查找，返回的是数组。而现在调用方法后，得到的类型太过宽泛，这和使用any 做为返回没多大差别。</span></span><br><span class="line"><span class="comment">//因为类型的不明朗，返回的结果都不能直接操作，需要进行类型转换后才能继续，否则编译会报错。</span></span><br><span class="line"><span class="keyword">let</span> result1 = getMessage(<span class="string">'audio'</span>);</span><br><span class="line"><span class="built_in">console</span>.log((result1 <span class="keyword">as</span> Message[]).length); <span class="comment">//不能直接对result1调用数组方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result2 = getMessage(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (result2) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log((result2 <span class="keyword">as</span> Message).content); <span class="comment">//不能对result2直接访问消息对象中的属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用重载实现</span></span><br><span class="line"><span class="comment">//通过提供多个函数类型的声明来解决上面的问题，最后得到的结果就是间接实现了函数的重载。当然这个重载只是TypeScript编译时的。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMessage</span>(<span class="params">id: number</span>): <span class="title">Message</span> | <span class="title">undefined</span>;</span></span><br><span class="line">function getMessage(type: MessageType): Message[];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMessage</span>(<span class="params">query: any</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> query === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data.find(<span class="function"><span class="params">message</span> =&gt;</span> message.id === query);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.filter(<span class="function"><span class="params">message</span> =&gt;</span> message.type === query);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到的结果类型是重载方法中指定的入参与返回的组合，在对结果进行使用时，无须再进行类型转换</span></span><br><span class="line"><span class="keyword">const</span> result1 = getMessage(<span class="string">'audio'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result1.length); <span class="comment">//无须类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = getMessage(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (result2) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result2.content); <span class="comment">//无须类型转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记(五)</title>
    <url>/archives/8af4fe17.html</url>
    <content><![CDATA[<!-- build time:Sat Jul 31 2021 00:39:59 GMT+0800 (GMT+08:00) --><p>为什么需要<code>泛型</code>?</p><ul><li>软件工程中，我们不仅要创建一致的定义好的 API，同时也要考虑可重用性，组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</li><li>在像<code>c#</code>和<code>java</code>中，可以使用泛型来创建可重用的组件，一个组件可支持多种类型的数据，这样用户就可以以自己的数据类型来使用组件。</li><li>通俗理解：泛型就是解决类、接口、方法的重用性，以及对不特定数据类型的支持。</li><li>可以支持不特定的数据类型。</li></ul><p>和<code>any</code>有什么区别?</p><ul><li><code>any</code>放弃了类型检查</li><li>如果想做到传入什么类型就返回什么类型，例如传入<code>number</code>类型就返回<code>number</code>类型，这时候就可以使用泛型。</li></ul><h2 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn &lt; number &gt; <span class="number">77</span>);</span><br></pre></td></tr></table></figure><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  private name: T;</span><br><span class="line">  <span class="keyword">constructor</span>(name: T) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  getName(): T &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person&lt;string&gt;(<span class="string">'Leo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.getName());</span><br></pre></td></tr></table></figure><p>如上，<code>&lt;T&gt;</code>表示传递一个 T 类型，在<code>new</code>的时候才把具体类型传入。其中<code>T</code>是变量可改，但通常比较常见就是写<code>T</code><br>之前说<code>TypeScript</code>类型的时有说到数组，其实数组本质就是一个泛型类</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;number&gt;();</span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写法一</span></span><br><span class="line">interface Config &#123;</span><br><span class="line">  &lt;T&gt;(value: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getData: Config = <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(getData &lt; string &gt; <span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法二：此处与写法一的不同之处在于,类型传递的时机不同,上面那个是在函数调用的时候传递类型,此处是在接口实现的时候传递类型</span></span><br><span class="line">interface Config&lt;T&gt; &#123;</span><br><span class="line">  (value: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getData: Config&lt;string&gt; = <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(getData(<span class="string">"张三"</span>));</span><br></pre></td></tr></table></figure><h2 id="把类作为参数来约束数据传入的类型"><a href="#把类作为参数来约束数据传入的类型" class="headerlink" title="把类作为参数来约束数据传入的类型"></a>把类作为参数来约束数据传入的类型</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  username: string | <span class="literal">undefined</span>;</span><br><span class="line">  password: string | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySqlDb</span> </span>&#123;</span><br><span class="line">  add(user: User): boolean &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">let</span> u = <span class="keyword">new</span> User();</span><br><span class="line">u.username = <span class="string">"张三"</span>;</span><br><span class="line">u.password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Db = <span class="keyword">new</span> MySqlDb();</span><br><span class="line">Db.add(u); <span class="comment">//&#123; username: '张三', password: '123456' &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//上述方法可以改为泛型类</span></span><br><span class="line"><span class="comment">//操作数据库的泛型类，这样可以规范插入数据库数据的类规范</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySqlDb</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  add(info: T): boolean &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(info);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 想给User表增加数据</span></span><br><span class="line"><span class="comment">// 1、定义一个User类 和数据库进行映射</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  username: string | <span class="literal">undefined</span>;</span><br><span class="line">  password: string | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> u = <span class="keyword">new</span> User();</span><br><span class="line">u.username = <span class="string">'张三'</span>;</span><br><span class="line">u.password = <span class="string">'123'</span>;</span><br><span class="line"><span class="keyword">let</span> Db = <span class="keyword">new</span> MySqlDb&lt;User&gt;(); <span class="comment">// 这一步很关键,要定义User类型</span></span><br><span class="line">Db.add(u);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、文章类，数据库映射</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">  title: string | <span class="literal">undefined</span>;</span><br><span class="line">  desc: string | <span class="literal">undefined</span>;</span><br><span class="line">  status: number | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(params:&#123;</span><br><span class="line">    title:string | <span class="literal">undefined</span>;</span><br><span class="line">    desc:string | <span class="literal">undefined</span>;</span><br><span class="line">    status?:number | <span class="literal">undefined</span>;</span><br><span class="line">  &#125;) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>,params)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Article(&#123;</span><br><span class="line">  title: <span class="string">'分类'</span>,</span><br><span class="line">  desc: <span class="string">'123'</span>,</span><br><span class="line">  status: <span class="number">1</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//类当前参数的泛型类</span></span><br><span class="line"><span class="keyword">let</span> Db = <span class="keyword">new</span> MySqlDb&lt;Article&gt;(); <span class="comment">// 指定类型</span></span><br><span class="line">Db.add(a); <span class="comment">// log a</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记(六)</title>
    <url>/archives/13fbb665.html</url>
    <content><![CDATA[<!-- build time:Sat Jul 31 2021 00:39:59 GMT+0800 (GMT+08:00) --><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><ul><li><p>命名空间一个最明确的目的就是解决重名问题。</p></li><li><p>假设这样一种情况，当一个班上有两个名叫小明的学生时，为了明确区分它们，我们在使用名字之外，不得不使用一些额外的信息，比如他们的姓（王小明，李小明），或者他们父母的名字等等。</p></li><li><p>命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的。这样，在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中。</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以上定义了一个命名空间A，如果我们需要在外部可以调用A中的内容，则需要添加export关键字。</span></span><br><span class="line">namespace A&#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params">food:string</span>):<span class="title">void</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`吃<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace B&#123;</span><br><span class="line">  A.eat(<span class="string">'桃子'</span>); <span class="comment">//在另一个命名空间调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记(四)</title>
    <url>/archives/8c5fa96a.html</url>
    <content><![CDATA[<!-- build time:Sat Jul 31 2021 00:39:59 GMT+0800 (GMT+08:00) --><p><code>TypeScript</code>的核心原则之一是对值所具有的结构进行类型检查，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p><h2 id="定义接口-amp-基本使用"><a href="#定义接口-amp-基本使用" class="headerlink" title="定义接口 &amp; 基本使用"></a>定义接口 &amp; 基本使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface LabelledValue &#123;</span><br><span class="line">  color: string;</span><br><span class="line">  height: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值的时候,变量的形状必须和接口的规则保持一致</span></span><br><span class="line"><span class="keyword">const</span> labelVal: LabelledValue = &#123;</span><br><span class="line">  color: <span class="string">"灰色"</span>,</span><br><span class="line">  height: <span class="number">56</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对方法传入的参数进行约束</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabelVal</span>(<span class="params">label: LabelledValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;label.color&#125;</span>---<span class="subst">$&#123;label.height&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方式一,调用方法编译报错,传入的参数不符合接口规范</span></span><br><span class="line">printLabelVal(&#123;</span><br><span class="line">  color: <span class="string">"天蓝色"</span>,</span><br><span class="line">  height: <span class="number">88</span>,</span><br><span class="line">  width: <span class="number">100</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方式二,这样传参不报错,暂时不知道具体原理,之后再来填坑</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  color: <span class="string">"天蓝色"</span>,</span><br><span class="line">  height: <span class="number">88</span>,</span><br><span class="line">  width: <span class="number">100</span>,</span><br><span class="line">&#125;;</span><br><span class="line">printLabelVal(obj);</span><br></pre></td></tr></table></figure><h2 id="可选属性-amp-只读属性"><a href="#可选属性-amp-只读属性" class="headerlink" title="可选属性 &amp; 只读属性"></a>可选属性 &amp; 只读属性</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可选属性:有时我们希望不需要完全匹配一个接口，那么可以用可选属性</span></span><br><span class="line">interface Person &#123;</span><br><span class="line">name: string;</span><br><span class="line">age: number;</span><br><span class="line">car?: string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Lucy: Person = &#123;</span><br><span class="line">name: <span class="string">'Lucy Lucy'</span>,</span><br><span class="line">age: <span class="number">18</span>,</span><br><span class="line"><span class="comment">//car: '宝马'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//只读属性:一些对象属性只能在对象刚刚创建的时候修改其值。你可以在属性名前用 readonly来指定只读属性。</span></span><br><span class="line">interface Point &#123;</span><br><span class="line">readonly x: number;</span><br><span class="line">readonly y: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1: Point = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;;</span><br><span class="line">p1.x = <span class="number">5</span>; <span class="comment">//编译报错 Cannot assign to 'x' because it is a read-only property</span></span><br></pre></td></tr></table></figure><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>对方法传入的参数、以及返回值进行约束。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface MyTypeFn &#123;</span><br><span class="line">  (x: number, <span class="attr">y</span>: number): number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> add: MyTypeFn = <span class="function"><span class="keyword">function</span> (<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="可索引属性"><a href="#可索引属性" class="headerlink" title="可索引属性"></a>可索引属性</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对数组的约束,数组类型接口</span></span><br><span class="line">interface UserArray &#123;</span><br><span class="line">  <span class="comment">//表示数组中index必须是number,value必须是string</span></span><br><span class="line">  [index: numer]: string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr: UserArray = [<span class="string">"123"</span>, <span class="string">"456"</span>];</span><br><span class="line"><span class="comment">//对对象的约束,对象类型接口</span></span><br><span class="line">interface UserObj &#123;</span><br><span class="line">  [index: string]: string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj: UserObj = &#123; <span class="attr">name</span>: <span class="string">"123"</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="类接口"><a href="#类接口" class="headerlink" title="类接口"></a>类接口</h2><p>对类的约束，和抽象类有点相似。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义接口 规定实现类必须要有name属性和eat方法</span></span><br><span class="line">interface Animal &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  eat(str: string): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  name: string; <span class="comment">//若没此属性，ts会编译报错</span></span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"eat"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//小例子:接口继承接口,类继承类,类实现接口</span></span><br><span class="line">interface Animal &#123;</span><br><span class="line">  eat(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Person extends Animal &#123;</span><br><span class="line">  work(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> </span>&#123;</span><br><span class="line">  name: string;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  coding(code: string) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Programmer</span> <span class="title">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  name: string;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// eat必须定义</span></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"吃"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// work也必须定义</span></span><br><span class="line">  work() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"工作"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>在Vue中使用NProgress</title>
    <url>/archives/f007732d.html</url>
    <content><![CDATA[<!-- build time:Sat Jul 31 2021 00:39:59 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>路由跳转时使用NProgress可在浏览器顶部显示进度条,让用户可知加载进度。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ npm install --save nprogress 或者</span><br><span class="line">$ yarn add nprogress</span><br><span class="line"></span><br><span class="line"><span class="comment">//用法</span></span><br><span class="line">NProgress.start();</span><br><span class="line">NProgress.done();</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在<code>main.js</code>或路由文件<code>index.js</code>中增加</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">'nprogress'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'nprogress/nprogress.css'</span></span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  NProgress.start()</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  NProgress.done()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h2><p>在<code>App.vue</code>中的<code>style</code>中增加</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#nprogress</span> <span class="selector-class">.bar</span> &#123;</span><br><span class="line">  background: pink !important; //自定义颜色</span><br><span class="line">  height: 1vh !important; //自定义高度</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>在Vue中通过动态插入标签的方式引入插件</title>
    <url>/archives/cca6d4c.html</url>
    <content><![CDATA[<!-- build time:Sat Jul 31 2021 00:39:59 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我们需要在Vue中使用原生JS插件时,可以通过下面的方式来使用该插件:</p><ul><li>方法一：改造源码,使插件可以通过import的方式引入使用</li><li>方法二：通过动态插入标签的方式引入插件</li></ul><h2 id="动态插入标签"><a href="#动态插入标签" class="headerlink" title="动态插入标签"></a>动态插入标签</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">  <span class="keyword">const</span> pinyin_dict_withtone = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  pinyin_dict_withtone.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">  pinyin_dict_withtone.src = <span class="string">'./static/dict/pinyin_dict_withtone.js'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(pinyin_dict_withtone);</span><br><span class="line">  pinyin_dict_withtone.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">//当文件加载完成时会触发onload事件,有些插件需要引入多个JS文件,那么则在下面继续引入依赖该文件的文件</span></span><br><span class="line">    <span class="keyword">const</span> pinyinUtil = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    pinyinUtil.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">    pinyinUtil.src = <span class="string">'./static/pinyinUtil.js'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(pinyinUtil);</span><br><span class="line">    pinyinUtil.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//插件加载完成,你可以在这里或者后面的生命周期里调用插件里的方法</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'插件加载完成'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>测试</title>
    <url>/archives/9daba997.html</url>
    <content><![CDATA[<!-- build time:Sat Jul 31 2021 00:39:59 GMT+0800 (GMT+08:00) --><h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h2><p><code>TypeScript</code>中为了使编写的代码更规范，增加了类型校验</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js:类型变化不报错</span></span><br><span class="line"><span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">flag = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// ts:必须指定类型</span></span><br><span class="line"><span class="keyword">let</span> flag: boolean = <span class="literal">true</span>;</span><br><span class="line">flag = <span class="number">123</span>; <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h3 id="1-布尔类型-boolean"><a href="#1-布尔类型-boolean" class="headerlink" title="(1)布尔类型(boolean)"></a>(1)布尔类型(<code>boolean</code>)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> flag: boolean = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="2-数字类型-number"><a href="#2-数字类型-number" class="headerlink" title="(2)数字类型(number)"></a>(2)数字类型(<code>number</code>)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num: number = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><h3 id="3-字符串类型-string"><a href="#3-字符串类型-string" class="headerlink" title="(3)字符串类型(string)"></a>(3)字符串类型(<code>string</code>)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str: string = <span class="string">"hello world!"</span>;</span><br></pre></td></tr></table></figure><h3 id="4-数组类型-array"><a href="#4-数组类型-array" class="headerlink" title="(4)数组类型(array)"></a>(4)数组类型(<code>array</code>)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写法一</span></span><br><span class="line"><span class="keyword">let</span> arr1: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2: string[] = [<span class="string">"Angular"</span>, <span class="string">"React"</span>, <span class="string">"Vue"</span>];</span><br><span class="line"><span class="keyword">let</span> arr3: any[] = [<span class="string">"hi"</span>, <span class="number">123</span>, <span class="literal">false</span>];</span><br><span class="line"><span class="comment">//写法二</span></span><br><span class="line"><span class="keyword">let</span> arr4: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><h3 id="5-元组类型-tuple"><a href="#5-元组类型-tuple" class="headerlink" title="(5)元组类型(tuple)"></a>(5)元组类型(<code>tuple</code>)</h3><p>元组属于数组的一种，可以指定数组内值的类型(元素顺序和个数必须与定义的保持一致)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: [string, number, boolean] = [<span class="string">"hi"</span>, <span class="number">123</span>, <span class="literal">false</span>];</span><br></pre></td></tr></table></figure><h3 id="6-枚举类型-enum"><a href="#6-枚举类型-enum" class="headerlink" title="(6)枚举类型(enum)"></a>(6)枚举类型(<code>enum</code>)</h3><p>常用来标识状态码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">enum Flag&#123;</span><br><span class="line">  success=<span class="number">1</span>,</span><br><span class="line">  error=<span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f:Flag=Flag.error; <span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果标识符没有赋值，那么打印的就是下标</span></span><br><span class="line">enum Coloe &#123;</span><br><span class="line">  red,</span><br><span class="line">  blue=<span class="string">'#0000FF'</span>,</span><br><span class="line">  orange</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c1:Color = Color.red; <span class="comment">//0</span></span><br><span class="line"><span class="keyword">let</span> c2:Color = Color.blue; <span class="comment">//'#0000FF'</span></span><br><span class="line"><span class="keyword">let</span> c3:Color = Color.orange; <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="7-任意类型-any"><a href="#7-任意类型-any" class="headerlink" title="(7)任意类型(any)"></a>(7)任意类型(<code>any</code>)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num: any = <span class="number">123</span>;</span><br><span class="line">num = <span class="literal">true</span>; <span class="comment">//不报错</span></span><br></pre></td></tr></table></figure><h3 id="8-null-和-undefined"><a href="#8-null-和-undefined" class="headerlink" title="(8)null 和 undefined"></a>(8)<code>null</code> 和 <code>undefined</code></h3><p><code>null</code> 和 <code>undefined</code>是其他数据类型(<code>never</code>类型)的子类型</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量定义之后没有赋值，编译时会报错</span></span><br><span class="line"><span class="keyword">let</span> a: number;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//error TS2454: letiable 'a' is used before being assigned.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个元素可能是number类型，可能是null或者undefined</span></span><br><span class="line"><span class="keyword">let</span> b: number | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//无报错，打印undefined</span></span><br></pre></td></tr></table></figure><h3 id="9-void类型"><a href="#9-void类型" class="headerlink" title="(9)void类型"></a>(9)<code>void</code>类型</h3><p><code>void</code>表示没有任何类型，一般用于一个方法没有返回值的情况，值得注意的是，方法没有返回值将得到<code>undefined</code>，但是我们需要定义成<code>void</code>类型，而不是<code>undefined</code>类型，否则将报错。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果方法没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"abc"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果方法有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-never类型"><a href="#10-never类型" class="headerlink" title="(10)never类型"></a>(10)<code>never</code>类型</h3><ul><li><code>never</code>表示的是那些永不存在的值的类型，包括<code>null</code>和<code>undefined</code>。</li><li>在一个没有返回值标注的函数表达式或箭头函数中,如果函数没有<code>return</code>语句,或者仅有表达式类型为<code>never</code>的<code>return</code>语句,并且函数的终止点无法被执行到(按照控制流分析), 则推导出的函数返回值类型是<code>never</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回never的函数必须有无法被执行到的终止点</span></span><br><span class="line"><span class="keyword">let</span> err = (): <span class="function"><span class="params">never</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"异常"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> infiniteLoop = (): <span class="function"><span class="params">never</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2.函数"></a>2.函数</h2><h3 id="1-函数的定义"><a href="#1-函数的定义" class="headerlink" title="(1)函数的定义"></a>(1)函数的定义</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数声明法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr</span>(<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"hello world!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line"><span class="keyword">let</span> gerNum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">let</span> getFlag = (): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-函数中传参"><a href="#2-函数中传参" class="headerlink" title="(2)函数中传参"></a>(2)函数中传参</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义参数的数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: string, age: number</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">getInfo(<span class="string">"Leo"</span>, <span class="number">18</span>); <span class="comment">//Leo---18</span></span><br><span class="line">getInfo(<span class="string">"Leo"</span>); <span class="comment">//编译报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可选参数(可选参数必须放在参数的最后面)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: string, age?: number</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> age ? <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span> : <span class="string">`<span class="subst">$&#123;name&#125;</span>---年龄保密`</span>;</span><br><span class="line">&#125;</span><br><span class="line">getInfo(<span class="string">"Leo"</span>, <span class="number">18</span>); <span class="comment">//Leo---18</span></span><br><span class="line">getInfo(<span class="string">"Leo"</span>); <span class="comment">//Leo---年龄保密</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: string = <span class="string">"Leo"</span>, age: number = <span class="number">18</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">getInfo(); <span class="comment">//Leo---18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//剩余参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">...args: number[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">pre, item</span>) =&gt;</span> pre + item, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">getSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">//15</span></span><br></pre></td></tr></table></figure><h3 id="3-函数重载"><a href="#3-函数重载" class="headerlink" title="(3)函数重载"></a>(3)函数重载</h3><ul><li><p>方法重载(<code>overload</code>)在传统的静态类型语言中是很常见的。JavaScript 作为动态语言， 是没有重载这一说的。一是它的参数没有类型的区分，二是对参数个数也没有检查。虽然语言层面无法自动进行重载，但借助其动态的特性，我们可以在代码中手动检查入参的类型，或者通过<code>arguments</code>获取到参数个数，从而实现根据不同的入参做不同的操作。</p></li><li><p>比如有一个获取聊天消息的方法，根据传入的参数从数组中查找数据。如果入参为数字，则认为是 id，然后从数据源中找对应 id 的数据并返回，否则当成类型，返回这一类型的消息。</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TypeScript中,假如我们的消息数据为如下结构：</span></span><br><span class="line">type MessageType = <span class="string">"string"</span> | <span class="string">"image"</span> | <span class="string">"audio"</span>;</span><br><span class="line">type Message = &#123;</span><br><span class="line">  id: number,</span><br><span class="line">  type: MessageType,</span><br><span class="line">  content: string,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> data: Message[] = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">type</span>: <span class="string">"string"</span>, <span class="attr">content</span>: <span class="string">"hello"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">"image"</span>, <span class="attr">content</span>: <span class="string">"url_for_iamge"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">"string"</span>, <span class="attr">content</span>: <span class="string">"world"</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不使用重载实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMessage</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  query: number | MessageType</span></span></span><br><span class="line">): Message[] | Message | undefined &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> query === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data.find(<span class="function"><span class="params">message</span> =&gt;</span> message.id === query);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.filter(<span class="function"><span class="params">message</span> =&gt;</span> message.type === query);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样做有两个缺点一是类型书写上不太优雅，二是没有发挥出TypeScript类型检查的优势，这里我们是可以根据入参的类型明确知道返回的类型的，即如果传入的是id，返回的是单个数据或undefined，如果是根据类型查找，返回的是数组。而现在调用方法后，得到的类型太过宽泛，这和使用any 做为返回没多大差别。</span></span><br><span class="line"><span class="comment">//因为类型的不明朗，返回的结果都不能直接操作，需要进行类型转换后才能继续，否则编译会报错。</span></span><br><span class="line"><span class="keyword">let</span> result1 = getMessage(<span class="string">'audio'</span>);</span><br><span class="line"><span class="built_in">console</span>.log((result1 <span class="keyword">as</span> Message[]).length); <span class="comment">//不能直接对result1调用数组方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result2 = getMessage(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (result2) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log((result2 <span class="keyword">as</span> Message).content); <span class="comment">//不能对result2直接访问消息对象中的属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用重载实现</span></span><br><span class="line"><span class="comment">//通过提供多个函数类型的声明来解决上面的问题，最后得到的结果就是间接实现了函数的重载。当然这个重载只是TypeScript编译时的。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMessage</span>(<span class="params">id: number</span>): <span class="title">Message</span> | <span class="title">undefined</span>;</span></span><br><span class="line">function getMessage(type: MessageType): Message[];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMessage</span>(<span class="params">query: any</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> query === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data.find(<span class="function"><span class="params">message</span> =&gt;</span> message.id === query);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.filter(<span class="function"><span class="params">message</span> =&gt;</span> message.type === query);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到的结果类型是重载方法中指定的入参与返回的组合，在对结果进行使用时，无须再进行类型转换</span></span><br><span class="line"><span class="keyword">const</span> result1 = getMessage(<span class="string">'audio'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result1.length); <span class="comment">//无须类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = getMessage(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (result2) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result2.content); <span class="comment">//无须类型转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-类"><a href="#3-类" class="headerlink" title="3.类"></a>3.类</h2><h3 id="1-回顾：ES5-中的类"><a href="#1-回顾：ES5-中的类" class="headerlink" title="(1)回顾：ES5 中的类"></a>(1)回顾：ES5 中的类</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`姓名:<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>,年龄:<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原型上定义属性和方法</span></span><br><span class="line">Person.prototype.sex = <span class="string">"男"</span>;</span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hi~"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象冒充继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Inherit</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age); <span class="comment">//可以继承构造函数里面的属性和方法,实例化子类可以给父类传参,但是无法继承原型(Person.prototype)上的属性和方法。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> i = <span class="keyword">new</span> Inherit(<span class="string">"Leo"</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">//new关键字做了什么?</span></span><br><span class="line"><span class="comment">//1&gt; let obj = &#123;&#125;;</span></span><br><span class="line"><span class="comment">//2&gt; obj.__proto__ = Inherit.prototype;</span></span><br><span class="line"><span class="comment">//3&gt; let i = Inherit.call(obj,'Leo',18);</span></span><br><span class="line">i.getInfo(); <span class="comment">//姓名:Leo,年龄:18</span></span><br><span class="line">i.sayHi(); <span class="comment">//无法继承原型上的属性和方法 i.sayHi is not a function</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型链继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Inherit</span>(<span class="params">name, age</span>) </span>&#123;&#125;</span><br><span class="line">Inherit.prototype = <span class="keyword">new</span> Person(); <span class="comment">//可以继承构造函数和原型里面的属性和方法,但是实例化子类时无法给父类传参。</span></span><br><span class="line"><span class="comment">//Inherit.prototype.__proto__ = Person.prototype;</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="keyword">new</span> Inherit(<span class="string">"Leo"</span>, <span class="number">18</span>);</span><br><span class="line">i.sayHi(); <span class="comment">//hi~</span></span><br><span class="line">i.getInfo(); <span class="comment">//无法给父类传参 姓名:undefined,年龄:undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型链+对象冒充组合使用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Inherit</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>,name,age);<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">Inherit.prototype = new Person();</span></span><br><span class="line"><span class="regexp">let i = new Inherit('Leo',18);</span></span><br><span class="line"><span class="regexp">i.sayHi(); /</span><span class="regexp">/hi~</span></span><br><span class="line"><span class="regexp">i.getInfo(); /</span><span class="regexp">/i.sayHi is not a function</span></span><br></pre></td></tr></table></figure><h3 id="2-修饰符"><a href="#2-修饰符" class="headerlink" title="(2)修饰符"></a>(2)修饰符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ts里面定义属性的时候给我们提供了三种修饰符：</span><br><span class="line">  public(默认):公有,在类里面、子类、类外部都可以访问</span><br><span class="line">  protected:保护,在类里面、子类里面可以访问,在类外部无法访问</span><br><span class="line">  private:私有,在类里面可以访问,子类、类外部没法访问</span><br><span class="line">  注：属性如果没有显示声明修饰符，则默认为 public</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  public name: string;</span><br><span class="line">  <span class="keyword">constructor</span>(name:string)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; <span class="comment">//类里使用</span></span><br><span class="line">  &#125;</span><br><span class="line">  getName():string&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'Leo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">//类外部使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inherit</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  setName(name:string):<span class="keyword">void</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; <span class="comment">//子类里使用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> i = <span class="keyword">new</span> Inherit(<span class="string">'小明'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(i.name); <span class="comment">//类外部使用</span></span><br></pre></td></tr></table></figure><h3 id="3-定义类"><a href="#3-定义类" class="headerlink" title="(3)定义类"></a>(3)定义类</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  name: string; <span class="comment">//这里省略了public</span></span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="comment">//构造函数,实例化类时触发的方法</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  getName(): string &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  setName(name: string): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">"Leo"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.getName());</span><br><span class="line">p.setName(<span class="string">"小明"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.getName());</span><br></pre></td></tr></table></figure><h3 id="4-静态属性-amp-静态方法"><a href="#4-静态属性-amp-静态方法" class="headerlink" title="(4)静态属性 &amp; 静态方法"></a>(4)静态属性 &amp; 静态方法</h3><p>通过<code>static</code>关键字声明静态属性 &amp; 静态方法，通过<code>类名.属性名</code>或者<code>类名.方法名</code>直接调用。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  public name: string;</span><br><span class="line">  public age: number = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态属性</span></span><br><span class="line">  <span class="keyword">static</span> sex = <span class="string">'男'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步。`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态方法</span></span><br><span class="line">  <span class="keyword">static</span> print() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是静态方法print'</span>);</span><br><span class="line">    <span class="comment">//静态方法里面没法直接调用类里面的属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age); <span class="comment">//undefined</span></span><br><span class="line">    <span class="comment">//静态属性调用</span></span><br><span class="line">    <span class="built_in">console</span>.log(Person.sex); <span class="comment">//男</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'张三'</span>);</span><br><span class="line">p.run(); <span class="comment">//张三在跑步。</span></span><br><span class="line"><span class="comment">//静态方法调用</span></span><br><span class="line">Person.print();</span><br></pre></td></tr></table></figure><h3 id="5-继承"><a href="#5-继承" class="headerlink" title="(5)继承"></a>(5)继承</h3><p>使用<code>extends</code>和<code>super</code>关键字实现继承。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inherit</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> i = <span class="keyword">new</span> Inherit(<span class="string">"小明"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(i.getName());</span><br></pre></td></tr></table></figure><h3 id="6-多态"><a href="#6-多态" class="headerlink" title="(6)多态"></a>(6)多态</h3><p>父类定义一个方法不去实现，让继承它的子类去实现，每一个子类有不同的表现。多态属于继承。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类 Animal</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  public name: string;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//定义一个方法,具体不做实现,子类自己实现。</span></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'function: eat'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类 Dog</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>  <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//自行实现父类定义的eat方法</span></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>吃肉。`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类 Cat</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//自行实现父类定义的eat方法</span></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>吃鱼。`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> Dog(<span class="string">'小狗'</span>);</span><br><span class="line">d.eat();  <span class="comment">//小狗吃肉。</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Cat(<span class="string">'小猫'</span>);</span><br><span class="line">c.eat();  <span class="comment">//小猫吃鱼。</span></span><br></pre></td></tr></table></figure><h3 id="7-抽象类-amp-抽象方法："><a href="#7-抽象类-amp-抽象方法：" class="headerlink" title="(7)抽象类 &amp; 抽象方法："></a>(7)抽象类 &amp; 抽象方法：</h3><ul><li>使用<code>abstract</code>关键字定义抽象类和抽象方法，抽象方法只能放在抽象类里面。</li><li>ts 中的抽象类，是提供其他类继承的基类，不能直接被实例化。抽象类中的抽象方法不包含具体实现且必须在派生类中实现。</li><li>抽象类和抽象方法用来定义标准。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类 Animal</span></span><br><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    public name: string;</span><br><span class="line">    <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//抽象方法,子类必须实现这个方法</span></span><br><span class="line">    abstract eat(): any;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通方法,不要求子类必须实现</span></span><br><span class="line">    sleep() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在睡觉。`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal();  <span class="comment">// error: 无法创建抽象类的实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子类 Dog 继承 抽象类 Animal</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//抽象类的子类(派生类)必须实现抽象类里的抽象方法,如果不实现会报错。</span></span><br><span class="line">    eat() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>吃肉。`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> Dog(<span class="string">'小狗'</span>);</span><br><span class="line">d.eat();  <span class="comment">//小狗吃肉。</span></span><br></pre></td></tr></table></figure><h2 id="4-接口"><a href="#4-接口" class="headerlink" title="4.接口"></a>4.接口</h2><p><code>TypeScript</code>的核心原则之一是对值所具有的结构进行类型检查，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p><h3 id="1-定义接口-amp-基本使用"><a href="#1-定义接口-amp-基本使用" class="headerlink" title="(1)定义接口 &amp; 基本使用"></a>(1)定义接口 &amp; 基本使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface LabelledValue &#123;</span><br><span class="line">  color: string;</span><br><span class="line">  height: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值的时候,变量的形状必须和接口的规则保持一致</span></span><br><span class="line"><span class="keyword">const</span> labelVal: LabelledValue = &#123;</span><br><span class="line">  color: <span class="string">"灰色"</span>,</span><br><span class="line">  height: <span class="number">56</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对方法传入的参数进行约束</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabelVal</span>(<span class="params">label: LabelledValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;label.color&#125;</span>---<span class="subst">$&#123;label.height&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方式一,调用方法编译报错,传入的参数不符合接口规范</span></span><br><span class="line">printLabelVal(&#123;</span><br><span class="line">  color: <span class="string">"天蓝色"</span>,</span><br><span class="line">  height: <span class="number">88</span>,</span><br><span class="line">  width: <span class="number">100</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方式二,这样传参不报错,暂时不知道具体原理,之后再来填坑</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  color: <span class="string">"天蓝色"</span>,</span><br><span class="line">  height: <span class="number">88</span>,</span><br><span class="line">  width: <span class="number">100</span>,</span><br><span class="line">&#125;;</span><br><span class="line">printLabelVal(obj);</span><br></pre></td></tr></table></figure><h3 id="2-可选属性-amp-只读属性"><a href="#2-可选属性-amp-只读属性" class="headerlink" title="(2)可选属性 &amp; 只读属性"></a>(2)可选属性 &amp; 只读属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可选属性:有时我们希望不需要完全匹配一个接口，那么可以用可选属性</span></span><br><span class="line">interface Person &#123;</span><br><span class="line">name: string;</span><br><span class="line">age: number;</span><br><span class="line">car?: string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Lucy: Person = &#123;</span><br><span class="line">name: <span class="string">'Lucy Lucy'</span>,</span><br><span class="line">age: <span class="number">18</span>,</span><br><span class="line"><span class="comment">//car: '宝马'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//只读属性:一些对象属性只能在对象刚刚创建的时候修改其值。你可以在属性名前用 readonly来指定只读属性。</span></span><br><span class="line">interface Point &#123;</span><br><span class="line">readonly x: number;</span><br><span class="line">readonly y: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1: Point = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;;</span><br><span class="line">p1.x = <span class="number">5</span>; <span class="comment">//编译报错 Cannot assign to 'x' because it is a read-only property</span></span><br></pre></td></tr></table></figure><h3 id="3-函数类型"><a href="#3-函数类型" class="headerlink" title="(3)函数类型"></a>(3)函数类型</h3><p>对方法传入的参数、以及返回值进行约束。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface MyTypeFn &#123;</span><br><span class="line">  (x: number, <span class="attr">y</span>: number): number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> add: MyTypeFn = <span class="function"><span class="keyword">function</span> (<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-可索引属性"><a href="#4-可索引属性" class="headerlink" title="(4)可索引属性"></a>(4)可索引属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对数组的约束,数组类型接口</span></span><br><span class="line">interface UserArray &#123;</span><br><span class="line">  <span class="comment">//表示数组中index必须是number,value必须是string</span></span><br><span class="line">  [index: numer]: string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr: UserArray = [<span class="string">"123"</span>, <span class="string">"456"</span>];</span><br><span class="line"><span class="comment">//对对象的约束,对象类型接口</span></span><br><span class="line">interface UserObj &#123;</span><br><span class="line">  [index: string]: string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj: UserObj = &#123; <span class="attr">name</span>: <span class="string">"123"</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="5-类接口"><a href="#5-类接口" class="headerlink" title="(5)类接口"></a>(5)类接口</h3><p>对类的约束，和抽象类有点相似。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义接口 规定实现类必须要有name属性和eat方法</span></span><br><span class="line">interface Animal &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  eat(str: string): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  name: string; <span class="comment">//若没此属性，ts会编译报错</span></span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"eat"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//小例子:接口继承接口,类继承类,类实现接口</span></span><br><span class="line">interface Animal &#123;</span><br><span class="line">  eat(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Person extends Animal &#123;</span><br><span class="line">  work(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> </span>&#123;</span><br><span class="line">  name: string;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  coding(code: string) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Programmer</span> <span class="title">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  name: string;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// eat必须定义</span></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"吃"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// work也必须定义</span></span><br><span class="line">  work() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"工作"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-泛型"><a href="#5-泛型" class="headerlink" title="5.泛型"></a>5.泛型</h2><p>和<code>any</code>有什么区别?</p><ul><li><code>any</code>放弃了类型检查</li><li>如果想做到传入什么类型就返回什么类型，例如传入 number 类型就返回 number 类型，这时候就可以使用泛型。</li></ul><p>泛型：</p><ul><li>软件工程中，我们不仅要创建一致的定义好的 API，同时也要考虑可重用性，组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</li><li>在像 c#和 java 中，可以使用泛型来创建可重用的组件，一个组件可支持多种类型的数据，这样用户就可以以自己的数据类型来使用组件。</li><li>通俗理解：泛型就是解决类、接口、方法的重用性，以及对不特定数据类型的支持。</li><li>可以支持不特定的数据类型。</li></ul><h3 id="1-泛型函数"><a href="#1-泛型函数" class="headerlink" title="(1)泛型函数"></a>(1)泛型函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn &lt; number &gt; <span class="number">77</span>);</span><br></pre></td></tr></table></figure><h3 id="2-泛型类"><a href="#2-泛型类" class="headerlink" title="(2)泛型类"></a>(2)泛型类</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  private name: T;</span><br><span class="line">  <span class="keyword">constructor</span>(name: T) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  getName(): T &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person&lt;string&gt;(<span class="string">'Leo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.getName());</span><br></pre></td></tr></table></figure><p>如上，<code>&lt;T&gt;</code>表示传递一个 T 类型，在<code>new</code>的时候才把具体类型传入。其中<code>T</code>是变量可改，但通常比较常见就是写<code>T</code><br>之前说<code>TypeScript</code>类型的时有说到数组，其实数组本质就是一个泛型类</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;number&gt;();</span><br></pre></td></tr></table></figure><h3 id="3-泛型接口"><a href="#3-泛型接口" class="headerlink" title="(3)泛型接口"></a>(3)泛型接口</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写法一</span></span><br><span class="line">interface Config &#123;</span><br><span class="line">  &lt;T&gt;(value: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getData: Config = <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(getData &lt; string &gt; <span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法二：此处与写法一的不同之处在于,类型传递的时机不同,上面那个是在函数调用的时候传递类型,此处是在接口实现的时候传递类型</span></span><br><span class="line">interface Config&lt;T&gt; &#123;</span><br><span class="line">  (value: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getData: Config&lt;string&gt; = <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(getData(<span class="string">"张三"</span>));</span><br></pre></td></tr></table></figure><h3 id="4-把类作为参数来约束数据传入的类型"><a href="#4-把类作为参数来约束数据传入的类型" class="headerlink" title="(4)把类作为参数来约束数据传入的类型"></a>(4)把类作为参数来约束数据传入的类型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  username: string | <span class="literal">undefined</span>;</span><br><span class="line">  password: string | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySqlDb</span> </span>&#123;</span><br><span class="line">  add(user: User): boolean &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">let</span> u = <span class="keyword">new</span> User();</span><br><span class="line">u.username = <span class="string">"张三"</span>;</span><br><span class="line">u.password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Db = <span class="keyword">new</span> MySqlDb();</span><br><span class="line">Db.add(u); <span class="comment">//&#123; username: '张三', password: '123456' &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//上述方法可以改为泛型类</span></span><br><span class="line"><span class="comment">//操作数据库的泛型类，这样可以规范插入数据库数据的类规范</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySqlDb</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  add(info: T): boolean &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(info);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 想给User表增加数据</span></span><br><span class="line"><span class="comment">// 1、定义一个User类 和数据库进行映射</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  username: string | <span class="literal">undefined</span>;</span><br><span class="line">  password: string | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> u = <span class="keyword">new</span> User();</span><br><span class="line">u.username = <span class="string">'张三'</span>;</span><br><span class="line">u.password = <span class="string">'123'</span>;</span><br><span class="line"><span class="keyword">let</span> Db = <span class="keyword">new</span> MySqlDb&lt;User&gt;(); <span class="comment">// 这一步很关键,要定义User类型</span></span><br><span class="line">Db.add(u);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、文章类，数据库映射</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">  title: string | <span class="literal">undefined</span>;</span><br><span class="line">  desc: string | <span class="literal">undefined</span>;</span><br><span class="line">  status: number | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(params:&#123;</span><br><span class="line">    title:string | <span class="literal">undefined</span>;</span><br><span class="line">    desc:string | <span class="literal">undefined</span>;</span><br><span class="line">    status?:number | <span class="literal">undefined</span>;</span><br><span class="line">  &#125;) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>,params)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Article(&#123;</span><br><span class="line">  title: <span class="string">'分类'</span>,</span><br><span class="line">  desc: <span class="string">'123'</span>,</span><br><span class="line">  status: <span class="number">1</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//类当前参数的泛型类</span></span><br><span class="line"><span class="keyword">let</span> Db = <span class="keyword">new</span> MySqlDb&lt;Article&gt;(); <span class="comment">// 指定类型</span></span><br><span class="line">Db.add(a); <span class="comment">// log a</span></span><br></pre></td></tr></table></figure><h2 id="6-命名空间"><a href="#6-命名空间" class="headerlink" title="6.命名空间"></a>6.命名空间</h2><ul><li><p>命名空间一个最明确的目的就是解决重名问题。</p></li><li><p>假设这样一种情况，当一个班上有两个名叫小明的学生时，为了明确区分它们，我们在使用名字之外，不得不使用一些额外的信息，比如他们的姓（王小明，李小明），或者他们父母的名字等等。</p></li><li><p>命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的。这样，在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中。</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以上定义了一个命名空间A，如果我们需要在外部可以调用A中的内容，则需要添加export关键字。</span></span><br><span class="line">namespace A&#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params">food:string</span>):<span class="title">void</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`吃<span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace B&#123;</span><br><span class="line">  A.eat(<span class="string">'桃子'</span>); <span class="comment">//在另一个命名空间调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-装饰器"><a href="#7-装饰器" class="headerlink" title="7.装饰器"></a>7.装饰器</h2><ul><li>装饰器是一种特殊类型的声明，他能够被附加到类声明，方法，属性或者参数上，可以修改类的行为。</li><li>通俗的将装饰器就是一个方法，可以注入到类、方法、属性参数上来扩展类、属性、方法、参数的功能。</li><li>常见的装饰器有：类装饰器、属性装饰器、方法装饰器、参数装饰器。</li><li>装饰器的写法：普通装饰器（无法传参）、装饰器工厂（可传参）。</li><li>装饰器是过去几年中 js 最大的成就之一，已经是 ES7 的标准特性之一。</li></ul><h3 id="1-类装饰器"><a href="#1-类装饰器" class="headerlink" title="(1)类装饰器"></a>(1)类装饰器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params: any</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params); <span class="comment">//params就是当前类</span></span><br><span class="line">  params.prototype.apiUrl = <span class="string">"动态扩展的属性"</span>;</span><br><span class="line">  params.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是一个run方法"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@logClass <span class="comment">//类装饰器,普通装饰器,无法传参,默认把class传入</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  getData() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//装饰器工厂</span></span><br><span class="line"><span class="comment">//作用:修改构造函数 扩展类属性和方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params: string</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// params是下方传过来的参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// target相当于是默认传过来的</span></span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">    <span class="built_in">console</span>.log(params);</span><br><span class="line">    target.prototype.apiUrl = params;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@logClass(<span class="string">"https://baidu.com"</span>) <span class="comment">// 可以传参</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  getData() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> http: any = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="built_in">console</span>.log(http.apiUrl); <span class="comment">// https://baidu.com</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以修改构造函数的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">target: any</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target);</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">target</span> </span>&#123;</span><br><span class="line">    apiUrl: any = <span class="string">'我是修改后的新数据'</span>;</span><br><span class="line">    getData() &#123;</span><br><span class="line">      <span class="keyword">this</span>.apiUrl = <span class="keyword">this</span>.apiUrl + <span class="string">'@@@'</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.apiUrl);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@logClass</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  public apiUrl: string | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.apiUrl = <span class="string">'我是构造函数里面的apiUrl'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.apiUrl);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> http: any = <span class="keyword">new</span> HttpClient();</span><br><span class="line">http.getData();</span><br></pre></td></tr></table></figure><h3 id="2-属性装饰器"><a href="#2-属性装饰器" class="headerlink" title="(2)属性装饰器"></a>(2)属性装饰器</h3><p>可以给属性赋值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params: string</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// params是下方传过来的参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// target是默认传过来的类对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">    <span class="built_in">console</span>.log(params);</span><br><span class="line">    target.prototype.apiUrl = params;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logProperty</span>(<span class="params">params: any</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 固定写法,参数中:target为类对象,attr为被装饰的属性名称</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any, attr: any</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">    <span class="built_in">console</span>.log(attr);</span><br><span class="line">    target[attr] = params;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@logClass(<span class="string">'https://baidu.com'</span>) <span class="comment">// 可以传参</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  <span class="comment">//这个属性修饰器的作用就是给url赋值初始值</span></span><br><span class="line">  @logProperty(<span class="string">'http://baidu.com'</span>)</span><br><span class="line">  public url: any | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  getData() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> http: any = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="built_in">console</span>.log(http.apiUrl); <span class="comment">// https://baidu.com</span></span><br></pre></td></tr></table></figure><h3 id="3-方法装饰器"><a href="#3-方法装饰器" class="headerlink" title="(3)方法装饰器"></a>(3)方法装饰器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">params: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any, methodName: any, desc: any</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target); <span class="comment">//对于静态成员来说是类的构造函数,对实例成员来说是类的原型对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(methodName); <span class="comment">//方法名字,getData</span></span><br><span class="line">    <span class="built_in">console</span>.log(desc); <span class="comment">//方法的描述对象,desc.value是该方法</span></span><br><span class="line">    target.apiUrl = <span class="string">'xxx'</span>; <span class="comment">//修改类属性</span></span><br><span class="line">    target.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'run'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  public url: any | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  @<span class="keyword">get</span>('https://www.baidu.com')</span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> http: any = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="built_in">console</span>.log(http.apiUrl); <span class="comment">//输出xxx</span></span><br><span class="line">http.run(); <span class="comment">//输出run</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例二 修改当前的方法(主要作用是装饰方法,并把方法的参数给变换类型)</span></span><br><span class="line"><span class="comment">//这个方法装饰其主要作用就是把参数都给格式化成string类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">params: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any, methodName: any, desc: any</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//修改方法,使所有参数变成string类型,并打印</span></span><br><span class="line">    <span class="keyword">let</span> oMethod = desc.value;</span><br><span class="line">    desc.value = <span class="function"><span class="keyword">function</span> (<span class="params">...args: any[]</span>) </span>&#123;</span><br><span class="line">      args = args.map(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">String</span>(value);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//利用apply进行对象冒充,对getdata进行修改,如果没有apply就相当于替换了getData方法</span></span><br><span class="line">      oMethod.apply(<span class="keyword">this</span>, args); <span class="comment">//this指HttpClient类</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  public url: any | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  @<span class="keyword">get</span>('https://www.baidu.com')</span><br><span class="line">  getData(...args: any[]) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是getData方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> http: any = <span class="keyword">new</span> HttpClient();</span><br><span class="line">http.getData(<span class="number">123</span>, <span class="string">'xxx'</span>); <span class="comment">//['123','xxx'] 我是getData方法</span></span><br></pre></td></tr></table></figure><h3 id="4-方法参数装饰器"><a href="#4-方法参数装饰器" class="headerlink" title="(4)方法参数装饰器"></a>(4)方法参数装饰器</h3><p>用的比较少，类装饰器也可以实现这个功能</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logParams</span>(<span class="params">params: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any, methodName: any, paramsIndex: any</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params); <span class="comment">// xxxx</span></span><br><span class="line">    <span class="built_in">console</span>.log(target); <span class="comment">// 原型对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(methodName); <span class="comment">// getData</span></span><br><span class="line">    <span class="built_in">console</span>.log(paramsIndex); <span class="comment">//参数在函数参数列表中的索引 0</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">  public url: any | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  getData(uuid: any, @logParams(<span class="string">'xxxx'</span>) nanoid: string) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(uuid); <span class="comment">// iii</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> HttpClient();</span><br><span class="line">a.getData(<span class="string">'iii'</span>, <span class="string">'ooo'</span>);</span><br></pre></td></tr></table></figure><h3 id="5-装饰器执行顺序"><a href="#5-装饰器执行顺序" class="headerlink" title="(5)装饰器执行顺序"></a>(5)装饰器执行顺序</h3><p>当存在多个装饰器时候：从上到下,从右到左。</p><!-- rebuild by neat -->]]></content>
  </entry>
</search>
